{"version":3,"file":"swap-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 56,\n  TESTNET = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\ntype ChainAddress = {\n  [chainId in ChainId]: string\n}\nexport const FACTORY_ADDRESS: ChainAddress = {\n  [ChainId.MAINNET]: \"0x96A3CbC01DFe417813258Feb50E2FdF3e2eF55F9\",\n  [ChainId.TESTNET]: \"0x288f840c23DeDa5bbB1Ca950C2033C354CEaF4ad\"\n}\n\nexport const INIT_CODE_HASH: ChainAddress = {\n  [ChainId.MAINNET]: \"0x6cbd54185813805bfdf336e0600bf3c272e510df5d084bda83e7793458f3f22b\",\n  [ChainId.TESTNET]: '0x6cbd54185813805bfdf336e0600bf3c272e510df5d084bda83e7793458f3f22b'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _9975 = JSBI.BigInt(9975)\nexport const _8575 = JSBI.BigInt(8575)\nexport const _10000 = JSBI.BigInt(10000)\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd', 18, 'WBNB', 'Wrapped BNB')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  _10000,\n  _9975,\n  _8575,\n  BigintIsh,\n  ChainId,\n  FACTORY_ADDRESS,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  ZERO_ADDRESS\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  public readonly baseToken: string\n  public readonly totalFee: JSBI\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.TESTNET): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            // @ts-ignore\n            FACTORY_ADDRESS[chainId || tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[chainId || tokenA.chainId]\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, baseToken: string = ZERO_ADDRESS, totalFee = 1400) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, tokenAmounts[0].token.chainId),\n      18,\n      'PYE-LP',\n      'PYESwap-LP'\n    )\n    this.baseToken = baseToken\n    this.totalFee = !baseToken || baseToken === ZERO_ADDRESS ? JSBI.BigInt(\"0\") : JSBI.BigInt(totalFee)\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const fee = this.baseToken === ZERO_ADDRESS ? _9975 : JSBI.subtract(_9975, this.totalFee);\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, fee)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.baseToken, JSBI.toNumber(this.totalFee))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const fee = this.baseToken === ZERO_ADDRESS ? _9975 : JSBI.subtract(_9975, this.totalFee);\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), fee)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.baseToken, JSBI.toNumber(this.totalFee))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n          ? CurrencyAmount.ether(amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPYESwapPair from './abis/IPYESwapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\n    const [reserves0, reserves1,, baseToken] = await new Contract(address, IPYESwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), baseToken)\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","MAINNET","TESTNET","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_9975","_10000","ZERO_ADDRESS","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","baseToken","totalFee","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","fee","inputReserve","outputReserve","inputAmountWithFee","outputAmount","toNumber","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPYESwapPair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}