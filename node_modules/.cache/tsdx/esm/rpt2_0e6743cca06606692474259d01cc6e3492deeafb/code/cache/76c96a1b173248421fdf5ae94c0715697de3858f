{"code":"import { TradeType } from './constants';\r\nimport invariant from 'tiny-invariant';\r\nimport { validateAndParseAddress } from './utils';\r\nimport { ETHER } from './entities';\r\nfunction toHex(currencyAmount) {\r\n    return `0x${currencyAmount.raw.toString(16)}`;\r\n}\r\nconst ZERO_HEX = '0x0';\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport class Router {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() { }\r\n    /**\r\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n     * @param trade to produce call parameters for\r\n     * @param options options for the call parameters\r\n     */\r\n    static swapCallParameters(trade, options) {\r\n        const etherIn = trade.inputAmount.currency === ETHER;\r\n        const etherOut = trade.outputAmount.currency === ETHER;\r\n        // the router does not support both ether in and out\r\n        invariant(!(etherIn && etherOut), 'ETHER_IN_OUT');\r\n        invariant(!('ttl' in options) || options.ttl > 0, 'TTL');\r\n        const to = validateAndParseAddress(options.recipient);\r\n        const amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\r\n        const amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\r\n        const path = trade.route.path.map((token) => token.address);\r\n        const deadline = 'ttl' in options\r\n            ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n            : `0x${options.deadline.toString(16)}`;\r\n        const useFeeOnTransfer = Boolean(options.feeOnTransfer);\r\n        let methodName;\r\n        let args;\r\n        let value;\r\n        switch (trade.tradeType) {\r\n            case TradeType.EXACT_INPUT:\r\n                if (etherIn) {\r\n                    methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens';\r\n                    // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n                    args = [amountOut, path, to, deadline];\r\n                    value = amountIn;\r\n                }\r\n                else if (etherOut) {\r\n                    methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH';\r\n                    // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n                    args = [amountIn, amountOut, path, to, deadline];\r\n                    value = ZERO_HEX;\r\n                }\r\n                else {\r\n                    methodName = useFeeOnTransfer\r\n                        ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n                        : 'swapExactTokensForTokens';\r\n                    // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n                    args = [amountIn, amountOut, path, to, deadline];\r\n                    value = ZERO_HEX;\r\n                }\r\n                break;\r\n            case TradeType.EXACT_OUTPUT:\r\n                invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT');\r\n                if (etherIn) {\r\n                    methodName = 'swapETHForExactTokens';\r\n                    // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n                    args = [amountOut, path, to, deadline];\r\n                    value = amountIn;\r\n                }\r\n                else if (etherOut) {\r\n                    methodName = 'swapTokensForExactETH';\r\n                    // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n                    args = [amountOut, amountIn, path, to, deadline];\r\n                    value = ZERO_HEX;\r\n                }\r\n                else {\r\n                    methodName = 'swapTokensForExactTokens';\r\n                    // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n                    args = [amountOut, amountIn, path, to, deadline];\r\n                    value = ZERO_HEX;\r\n                }\r\n                break;\r\n        }\r\n        return {\r\n            methodName,\r\n            args,\r\n            value,\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=router.js.map","references":["/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/utils.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/index.ts"],"map":"{\"version\":3,\"file\":\"router.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/router.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/router.d.ts","writeByteOrderMark":false,"text":"import { Percent, Trade } from './entities';\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n    /**\r\n     * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n     */\r\n    allowedSlippage: Percent;\r\n    /**\r\n     * How long the swap is valid until it expires, in seconds.\r\n     * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n     * are generated.\r\n     */\r\n    ttl: number;\r\n    /**\r\n     * The account that should receive the output of the swap.\r\n     */\r\n    recipient: string;\r\n    /**\r\n     * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n     */\r\n    feeOnTransfer?: boolean;\r\n}\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n    /**\r\n     * When the transaction expires.\r\n     * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n     */\r\n    deadline: number;\r\n}\r\n/**\r\n * The parameters to use in the call to the Pancake Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n    /**\r\n     * The method to call on the Pancake Router.\r\n     */\r\n    methodName: string;\r\n    /**\r\n     * The arguments to pass to the method, all hex encoded.\r\n     */\r\n    args: (string | string[])[];\r\n    /**\r\n     * The amount of wei to send in hex.\r\n     */\r\n    value: string;\r\n}\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport declare abstract class Router {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n     * @param trade to produce call parameters for\r\n     * @param options options for the call parameters\r\n     */\r\n    static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters;\r\n}\r\n"}}
