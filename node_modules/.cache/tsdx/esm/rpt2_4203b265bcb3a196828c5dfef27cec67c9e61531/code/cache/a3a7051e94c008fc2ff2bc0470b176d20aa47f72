{"code":"import { Token } from '../token';\r\nimport { TokenAmount } from './tokenAmount';\r\nimport { currencyEquals } from '../token';\r\nimport invariant from 'tiny-invariant';\r\nimport JSBI from 'jsbi';\r\nimport { TEN } from '../../constants';\r\nimport { Fraction } from './fraction';\r\nimport { CurrencyAmount } from './currencyAmount';\r\nexport class Price extends Fraction {\r\n    // denominator and numerator _must_ be raw, i.e. in the native representation\r\n    constructor(baseCurrency, quoteCurrency, denominator, numerator) {\r\n        super(numerator, denominator);\r\n        this.baseCurrency = baseCurrency;\r\n        this.quoteCurrency = quoteCurrency;\r\n        this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\r\n    }\r\n    static fromRoute(route) {\r\n        const prices = [];\r\n        for (const [i, pair] of route.pairs.entries()) {\r\n            prices.push(route.path[i].equals(pair.token0)\r\n                ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n                : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\r\n        }\r\n        return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);\r\n    }\r\n    get raw() {\r\n        return new Fraction(this.numerator, this.denominator);\r\n    }\r\n    get adjusted() {\r\n        return super.multiply(this.scalar);\r\n    }\r\n    invert() {\r\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\r\n    }\r\n    multiply(other) {\r\n        invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN');\r\n        const fraction = super.multiply(other);\r\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\r\n    }\r\n    // performs floor division on overflow\r\n    quote(currencyAmount) {\r\n        invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN');\r\n        if (this.quoteCurrency instanceof Token) {\r\n            return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient);\r\n        }\r\n        return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient);\r\n    }\r\n    toSignificant(significantDigits = 6, format, rounding) {\r\n        return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = 4, format, rounding) {\r\n        return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n    }\r\n}\r\n//# sourceMappingURL=price.js.map","references":["/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/token.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/tokenAmount.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/token.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/jsbi/jsbi.d.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/currency.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/route.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/fraction.ts","/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/currencyAmount.ts"],"map":"{\"version\":3,\"file\":\"price.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/entities/fractions/price.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tommyklindt/Documents/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/price.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh, Rounding } from '../../constants';\r\nimport { Currency } from '../currency';\r\nimport { Route } from '../route';\r\nimport { Fraction } from './fraction';\r\nimport { CurrencyAmount } from './currencyAmount';\r\nexport declare class Price extends Fraction {\r\n    readonly baseCurrency: Currency;\r\n    readonly quoteCurrency: Currency;\r\n    readonly scalar: Fraction;\r\n    static fromRoute(route: Route): Price;\r\n    constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh);\r\n    get raw(): Fraction;\r\n    get adjusted(): Fraction;\r\n    invert(): Price;\r\n    multiply(other: Price): Price;\r\n    quote(currencyAmount: CurrencyAmount): CurrencyAmount;\r\n    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;\r\n}\r\n"}}
