{"code":"import invariant from 'tiny-invariant';\r\nimport warning from 'tiny-warning';\r\nimport JSBI from 'jsbi';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants';\r\nexport function validateSolidityTypeInstance(value, solidityType) {\r\n    invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`);\r\n    invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`);\r\n}\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address) {\r\n    try {\r\n        const checksummedAddress = getAddress(address);\r\n        warning(address === checksummedAddress, `${address} is not checksummed.`);\r\n        return checksummedAddress;\r\n    }\r\n    catch (error) {\r\n        invariant(false, `${address} is not a valid address.`);\r\n    }\r\n}\r\nexport function parseBigintIsh(bigintIsh) {\r\n    return bigintIsh instanceof JSBI\r\n        ? bigintIsh\r\n        : typeof bigintIsh === 'bigint'\r\n            ? JSBI.BigInt(bigintIsh.toString())\r\n            : JSBI.BigInt(bigintIsh);\r\n}\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y) {\r\n    validateSolidityTypeInstance(y, SolidityType.uint256);\r\n    let z = ZERO;\r\n    let x;\r\n    if (JSBI.greaterThan(y, THREE)) {\r\n        z = y;\r\n        x = JSBI.add(JSBI.divide(y, TWO), ONE);\r\n        while (JSBI.lessThan(x, z)) {\r\n            z = x;\r\n            x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\r\n        }\r\n    }\r\n    else if (JSBI.notEqual(y, ZERO)) {\r\n        z = ONE;\r\n    }\r\n    return z;\r\n}\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert(items, add, maxSize, comparator) {\r\n    invariant(maxSize > 0, 'MAX_SIZE_ZERO');\r\n    // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n    invariant(items.length <= maxSize, 'ITEMS_SIZE');\r\n    // short circuit first item add\r\n    if (items.length === 0) {\r\n        items.push(add);\r\n        return null;\r\n    }\r\n    else {\r\n        const isFull = items.length === maxSize;\r\n        // short circuit if full and the additional item does not come before the last item\r\n        if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n            return add;\r\n        }\r\n        let lo = 0, hi = items.length;\r\n        while (lo < hi) {\r\n            const mid = (lo + hi) >>> 1;\r\n            if (comparator(items[mid], add) <= 0) {\r\n                lo = mid + 1;\r\n            }\r\n            else {\r\n                hi = mid;\r\n            }\r\n        }\r\n        items.splice(lo, 0, add);\r\n        return isFull ? items.pop() : null;\r\n    }\r\n}\r\n//# sourceMappingURL=utils.js.map","references":["/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-warning/src/index.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/jsbi/jsbi.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/@ethersproject/address/lib/index.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts"],"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/utils.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nimport { BigintIsh, SolidityType } from './constants';\r\nexport declare function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void;\r\nexport declare function validateAndParseAddress(address: string): string;\r\nexport declare function parseBigintIsh(bigintIsh: BigintIsh): JSBI;\r\nexport declare function sqrt(y: JSBI): JSBI;\r\nexport declare function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null;\r\n"}}
