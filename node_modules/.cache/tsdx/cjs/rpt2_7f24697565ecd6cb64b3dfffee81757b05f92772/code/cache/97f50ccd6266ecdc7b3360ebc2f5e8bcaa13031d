{"code":"import { currencyEquals } from '../token';\r\nimport { ETHER } from '../currency';\r\nimport invariant from 'tiny-invariant';\r\nimport JSBI from 'jsbi';\r\nimport _Big from 'big.js';\r\nimport toFormat from 'toformat';\r\nimport { Rounding, TEN, SolidityType } from '../../constants';\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils';\r\nimport { Fraction } from './fraction';\r\nconst Big = toFormat(_Big);\r\nexport class CurrencyAmount extends Fraction {\r\n    // amount _must_ be raw, i.e. in the native representation\r\n    constructor(currency, amount) {\r\n        const parsedAmount = parseBigintIsh(amount);\r\n        validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\r\n        super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)));\r\n        this.currency = currency;\r\n    }\r\n    /**\r\n     * Helper that calls the constructor with the ETHER currency\r\n     * @param amount ether amount in wei\r\n     */\r\n    static ether(amount) {\r\n        return new CurrencyAmount(ETHER, amount);\r\n    }\r\n    get raw() {\r\n        return this.numerator;\r\n    }\r\n    add(other) {\r\n        invariant(currencyEquals(this.currency, other.currency), 'TOKEN');\r\n        return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\r\n    }\r\n    subtract(other) {\r\n        invariant(currencyEquals(this.currency, other.currency), 'TOKEN');\r\n        return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\r\n    }\r\n    toSignificant(significantDigits = 6, format, rounding = Rounding.ROUND_DOWN) {\r\n        return super.toSignificant(significantDigits, format, rounding);\r\n    }\r\n    toFixed(decimalPlaces = this.currency.decimals, format, rounding = Rounding.ROUND_DOWN) {\r\n        invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS');\r\n        return super.toFixed(decimalPlaces, format, rounding);\r\n    }\r\n    toExact(format = { groupSeparator: '' }) {\r\n        Big.DP = this.currency.decimals;\r\n        return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n    }\r\n}\r\n//# sourceMappingURL=currencyAmount.js.map","references":["/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/token.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/currency.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/jsbi/jsbi.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/@types/big.js/index.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/toformat/toFormat.js","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/utils.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/fraction.ts"],"map":"{\"version\":3,\"file\":\"currencyAmount.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/entities/fractions/currencyAmount.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/currencyAmount.d.ts","writeByteOrderMark":false,"text":"import { Currency } from '../currency';\r\nimport JSBI from 'jsbi';\r\nimport { BigintIsh, Rounding } from '../../constants';\r\nimport { Fraction } from './fraction';\r\nexport declare class CurrencyAmount extends Fraction {\r\n    readonly currency: Currency;\r\n    /**\r\n     * Helper that calls the constructor with the ETHER currency\r\n     * @param amount ether amount in wei\r\n     */\r\n    static ether(amount: BigintIsh): CurrencyAmount;\r\n    protected constructor(currency: Currency, amount: BigintIsh);\r\n    get raw(): JSBI;\r\n    add(other: CurrencyAmount): CurrencyAmount;\r\n    subtract(other: CurrencyAmount): CurrencyAmount;\r\n    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;\r\n    toExact(format?: object): string;\r\n}\r\n"}}
