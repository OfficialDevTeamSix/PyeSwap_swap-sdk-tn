{"code":"import invariant from 'tiny-invariant';\r\nimport { ChainId } from '../constants';\r\nimport { validateAndParseAddress } from '../utils';\r\nimport { Currency } from './currency';\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n    constructor(chainId, address, decimals, symbol, name, projectLink) {\r\n        super(decimals, symbol, name);\r\n        this.chainId = chainId;\r\n        this.address = validateAndParseAddress(address);\r\n        this.projectLink = projectLink;\r\n    }\r\n    /**\r\n     * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n     * @param other other token to compare\r\n     */\r\n    equals(other) {\r\n        // short circuit on reference equality\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        return this.chainId === other.chainId && this.address === other.address;\r\n    }\r\n    /**\r\n     * Returns true if the address of this token sorts before the address of the other token\r\n     * @param other other token to compare\r\n     * @throws if the tokens have the same address\r\n     * @throws if the tokens are on different chains\r\n     */\r\n    sortsBefore(other) {\r\n        invariant(this.chainId === other.chainId, 'CHAIN_IDS');\r\n        invariant(this.address !== other.address, 'ADDRESSES');\r\n        return this.address.toLowerCase() < other.address.toLowerCase();\r\n    }\r\n}\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA, currencyB) {\r\n    if (currencyA instanceof Token && currencyB instanceof Token) {\r\n        return currencyA.equals(currencyB);\r\n    }\r\n    else if (currencyA instanceof Token) {\r\n        return false;\r\n    }\r\n    else if (currencyB instanceof Token) {\r\n        return false;\r\n    }\r\n    else {\r\n        return currencyA === currencyB;\r\n    }\r\n}\r\nexport const WETH = {\r\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n    [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd', 18, 'WBNB', 'Wrapped BNB')\r\n};\r\n//# sourceMappingURL=token.js.map","references":["/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/utils.ts","/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/currency.ts"],"map":"{\"version\":3,\"file\":\"token.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/entities/token.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAA;AACtC,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAA;AACtC,OAAO,EAAE,uBAAuB,EAAE,MAAM,UAAU,CAAA;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAErC;;GAEG;AACH,MAAM,OAAO,KAAM,SAAQ,QAAQ;IAKjC,YACE,OAAgB,EAChB,OAAe,EACf,QAAgB,EAChB,MAAe,EACf,IAAa,EACb,WAAoB;QAEpB,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAA;QAC/C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;IAChC,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,KAAY;QACxB,sCAAsC;QACtC,IAAI,IAAI,KAAK,KAAK,EAAE;YAClB,OAAO,IAAI,CAAA;SACZ;QACD,OAAO,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAA;IACzE,CAAC;IAED;;;;;OAKG;IACI,WAAW,CAAC,KAAY;QAC7B,SAAS,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;QACtD,SAAS,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAA;IACjE,CAAC;CACF;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,SAAmB,EAAE,SAAmB;IACrE,IAAI,SAAS,YAAY,KAAK,IAAI,SAAS,YAAY,KAAK,EAAE;QAC5D,OAAO,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;KACnC;SAAM,IAAI,SAAS,YAAY,KAAK,EAAE;QACrC,OAAO,KAAK,CAAA;KACb;SAAM,IAAI,SAAS,YAAY,KAAK,EAAE;QACrC,OAAO,KAAK,CAAA;KACb;SAAM;QACL,OAAO,SAAS,KAAK,SAAS,CAAA;KAC/B;AACH,CAAC;AAED,MAAM,CAAC,MAAM,IAAI,GAAG;IAClB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,4CAA4C,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC;IACtH,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,4CAA4C,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC;CACvH,CAAA\"}","dts":{"name":"/Users/tommy/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/token.d.ts","writeByteOrderMark":false,"text":"import { ChainId } from '../constants';\r\nimport { Currency } from './currency';\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport declare class Token extends Currency {\r\n    readonly chainId: ChainId;\r\n    readonly address: string;\r\n    readonly projectLink?: string;\r\n    constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string, projectLink?: string);\r\n    /**\r\n     * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n     * @param other other token to compare\r\n     */\r\n    equals(other: Token): boolean;\r\n    /**\r\n     * Returns true if the address of this token sorts before the address of the other token\r\n     * @param other other token to compare\r\n     * @throws if the tokens have the same address\r\n     * @throws if the tokens are on different chains\r\n     */\r\n    sortsBefore(other: Token): boolean;\r\n}\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport declare function currencyEquals(currencyA: Currency, currencyB: Currency): boolean;\r\nexport declare const WETH: {\r\n    56: Token;\r\n    97: Token;\r\n};\r\n"}}
