{"code":"import { Price } from './fractions/price';\r\nimport { TokenAmount } from './fractions/tokenAmount';\r\nimport invariant from 'tiny-invariant';\r\nimport JSBI from 'jsbi';\r\nimport { pack, keccak256 } from '@ethersproject/solidity';\r\nimport { getCreate2Address } from '@ethersproject/address';\r\nimport { _10000, _9975, ChainId, FACTORY_ADDRESS, FIVE, INIT_CODE_HASH, MINIMUM_LIQUIDITY, ZERO, ONE, ZERO_ADDRESS } from '../constants';\r\nimport { sqrt, parseBigintIsh } from '../utils';\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors';\r\nimport { Token } from './token';\r\nlet PAIR_ADDRESS_CACHE = {};\r\nexport class Pair {\r\n    constructor(tokenAmountA, tokenAmountB, baseToken = ZERO_ADDRESS, totalFee = 1400) {\r\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n            ? [tokenAmountA, tokenAmountB]\r\n            : [tokenAmountB, tokenAmountA];\r\n        this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, tokenAmounts[0].token.chainId), 18, 'PYE-LP', 'PYESwap-LP');\r\n        this.baseToken = baseToken;\r\n        this.totalFee = !baseToken || baseToken === ZERO_ADDRESS ? JSBI.BigInt(\"0\") : JSBI.BigInt(totalFee);\r\n        this.tokenAmounts = tokenAmounts;\r\n    }\r\n    static getAddress(tokenA, tokenB, chainId = ChainId.TESTNET) {\r\n        const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\r\n        if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n            PAIR_ADDRESS_CACHE = {\r\n                ...PAIR_ADDRESS_CACHE,\r\n                [tokens[0].address]: {\r\n                    ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n                    [tokens[1].address]: getCreate2Address(\r\n                    // @ts-ignore\r\n                    FACTORY_ADDRESS[chainId || tokenA.chainId], keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH[chainId || tokenA.chainId])\r\n                }\r\n            };\r\n        }\r\n        return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\r\n    }\r\n    /**\r\n     * Returns true if the token is either token0 or token1\r\n     * @param token to check\r\n     */\r\n    involvesToken(token) {\r\n        return token.equals(this.token0) || token.equals(this.token1);\r\n    }\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n     */\r\n    get token0Price() {\r\n        return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\r\n    }\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\r\n    get token1Price() {\r\n        return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\r\n    }\r\n    /**\r\n     * Return the price of the given token in terms of the other token in the pair.\r\n     * @param token token to return price of\r\n     */\r\n    priceOf(token) {\r\n        invariant(this.involvesToken(token), 'TOKEN');\r\n        return token.equals(this.token0) ? this.token0Price : this.token1Price;\r\n    }\r\n    /**\r\n     * Returns the chain ID of the tokens in the pair.\r\n     */\r\n    get chainId() {\r\n        return this.token0.chainId;\r\n    }\r\n    get token0() {\r\n        return this.tokenAmounts[0].token;\r\n    }\r\n    get token1() {\r\n        return this.tokenAmounts[1].token;\r\n    }\r\n    get reserve0() {\r\n        return this.tokenAmounts[0];\r\n    }\r\n    get reserve1() {\r\n        return this.tokenAmounts[1];\r\n    }\r\n    reserveOf(token) {\r\n        invariant(this.involvesToken(token), 'TOKEN');\r\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1;\r\n    }\r\n    getOutputAmount(inputAmount) {\r\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN');\r\n        if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n            throw new InsufficientReservesError();\r\n        }\r\n        const fee = this.baseToken === ZERO_ADDRESS ? _9975 : JSBI.subtract(_9975, this.totalFee);\r\n        const inputReserve = this.reserveOf(inputAmount.token);\r\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\r\n        const inputAmountWithFee = JSBI.multiply(inputAmount.raw, fee);\r\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\r\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee);\r\n        const outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\r\n        if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n            throw new InsufficientInputAmountError();\r\n        }\r\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.baseToken, JSBI.toNumber(this.totalFee))];\r\n    }\r\n    getInputAmount(outputAmount) {\r\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN');\r\n        if (JSBI.equal(this.reserve0.raw, ZERO) ||\r\n            JSBI.equal(this.reserve1.raw, ZERO) ||\r\n            JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\r\n            throw new InsufficientReservesError();\r\n        }\r\n        const fee = this.baseToken === ZERO_ADDRESS ? _9975 : JSBI.subtract(_9975, this.totalFee);\r\n        const outputReserve = this.reserveOf(outputAmount.token);\r\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\r\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000);\r\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), fee);\r\n        const inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\r\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.baseToken, JSBI.toNumber(this.totalFee))];\r\n    }\r\n    getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\r\n        invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY');\r\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n            ? [tokenAmountA, tokenAmountB]\r\n            : [tokenAmountB, tokenAmountA];\r\n        invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN');\r\n        let liquidity;\r\n        if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n            liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\r\n        }\r\n        else {\r\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\r\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\r\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\r\n        }\r\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n            throw new InsufficientInputAmountError();\r\n        }\r\n        return new TokenAmount(this.liquidityToken, liquidity);\r\n    }\r\n    getLiquidityValue(token, totalSupply, liquidity, feeOn = false, kLast) {\r\n        invariant(this.involvesToken(token), 'TOKEN');\r\n        invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY');\r\n        invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY');\r\n        invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY');\r\n        let totalSupplyAdjusted;\r\n        if (!feeOn) {\r\n            totalSupplyAdjusted = totalSupply;\r\n        }\r\n        else {\r\n            invariant(!!kLast, 'K_LAST');\r\n            const kLastParsed = parseBigintIsh(kLast);\r\n            if (!JSBI.equal(kLastParsed, ZERO)) {\r\n                const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\r\n                const rootKLast = sqrt(kLastParsed);\r\n                if (JSBI.greaterThan(rootK, rootKLast)) {\r\n                    const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\r\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\r\n                    const feeLiquidity = JSBI.divide(numerator, denominator);\r\n                    totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\r\n                }\r\n                else {\r\n                    totalSupplyAdjusted = totalSupply;\r\n                }\r\n            }\r\n            else {\r\n                totalSupplyAdjusted = totalSupply;\r\n            }\r\n        }\r\n        return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\r\n    }\r\n}\r\n//# sourceMappingURL=pair.js.map","references":["/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/entities/fractions/price.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/entities/fractions/tokenAmount.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/node_modules/jsbi/jsbi.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/node_modules/@ethersproject/solidity/lib/index.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/node_modules/@ethersproject/address/lib/index.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/constants.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/utils.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/errors.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/entities/token.ts"],"map":"{\"version\":3,\"file\":\"pair.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/entities/pair.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk/src/entities/pair.d.ts","writeByteOrderMark":false,"text":"import { Price } from './fractions/price';\r\nimport { TokenAmount } from './fractions/tokenAmount';\r\nimport JSBI from 'jsbi';\r\nimport { BigintIsh, ChainId } from '../constants';\r\nimport { Token } from './token';\r\nexport declare class Pair {\r\n    readonly liquidityToken: Token;\r\n    readonly baseToken: string;\r\n    readonly totalFee: JSBI;\r\n    private readonly tokenAmounts;\r\n    static getAddress(tokenA: Token, tokenB: Token, chainId?: ChainId): string;\r\n    constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, baseToken?: string, totalFee?: number);\r\n    /**\r\n     * Returns true if the token is either token0 or token1\r\n     * @param token to check\r\n     */\r\n    involvesToken(token: Token): boolean;\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n     */\r\n    get token0Price(): Price;\r\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\r\n    get token1Price(): Price;\r\n    /**\r\n     * Return the price of the given token in terms of the other token in the pair.\r\n     * @param token token to return price of\r\n     */\r\n    priceOf(token: Token): Price;\r\n    /**\r\n     * Returns the chain ID of the tokens in the pair.\r\n     */\r\n    get chainId(): ChainId;\r\n    get token0(): Token;\r\n    get token1(): Token;\r\n    get reserve0(): TokenAmount;\r\n    get reserve1(): TokenAmount;\r\n    reserveOf(token: Token): TokenAmount;\r\n    getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair];\r\n    getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair];\r\n    getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount;\r\n    getLiquidityValue(token: Token, totalSupply: TokenAmount, liquidity: TokenAmount, feeOn?: boolean, kLast?: BigintIsh): TokenAmount;\r\n}\r\n"}}
