{"code":"import invariant from 'tiny-invariant';\r\nimport JSBI from 'jsbi';\r\nimport _Decimal from 'decimal.js-light';\r\nimport _Big from 'big.js';\r\nimport toFormat from 'toformat';\r\nimport { Rounding } from '../../constants';\r\nimport { ONE } from '../../constants';\r\nimport { parseBigintIsh } from '../../utils';\r\nconst Decimal = toFormat(_Decimal);\r\nconst Big = toFormat(_Big);\r\nconst toSignificantRounding = {\r\n    [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n    [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n    [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n};\r\nconst toFixedRounding = {\r\n    [Rounding.ROUND_DOWN]: 0 /* RoundDown */,\r\n    [Rounding.ROUND_HALF_UP]: 1 /* RoundHalfUp */,\r\n    [Rounding.ROUND_UP]: 3 /* RoundUp */\r\n};\r\nexport class Fraction {\r\n    constructor(numerator, denominator = ONE) {\r\n        this.numerator = parseBigintIsh(numerator);\r\n        this.denominator = parseBigintIsh(denominator);\r\n    }\r\n    // performs floor division\r\n    get quotient() {\r\n        return JSBI.divide(this.numerator, this.denominator);\r\n    }\r\n    // remainder after floor division\r\n    get remainder() {\r\n        return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\r\n    }\r\n    invert() {\r\n        return new Fraction(this.denominator, this.numerator);\r\n    }\r\n    add(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n            return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\r\n        }\r\n        return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\r\n    }\r\n    subtract(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n            return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\r\n        }\r\n        return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\r\n    }\r\n    lessThan(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\r\n    }\r\n    equalTo(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\r\n    }\r\n    greaterThan(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\r\n    }\r\n    multiply(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\r\n    }\r\n    divide(other) {\r\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\r\n        return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\r\n    }\r\n    toSignificant(significantDigits, format = { groupSeparator: '' }, rounding = Rounding.ROUND_HALF_UP) {\r\n        invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\r\n        invariant(significantDigits > 0, `${significantDigits} is not positive.`);\r\n        Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n        const quotient = new Decimal(this.numerator.toString())\r\n            .div(this.denominator.toString())\r\n            .toSignificantDigits(significantDigits);\r\n        return quotient.toFormat(quotient.decimalPlaces(), format);\r\n    }\r\n    toFixed(decimalPlaces, format = { groupSeparator: '' }, rounding = Rounding.ROUND_HALF_UP) {\r\n        invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\r\n        invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\r\n        Big.DP = decimalPlaces;\r\n        Big.RM = toFixedRounding[rounding];\r\n        return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n    }\r\n}\r\n//# sourceMappingURL=fraction.js.map","references":["/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/jsbi/jsbi.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/decimal.js-light/decimal.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/@types/big.js/index.d.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/node_modules/toformat/toFormat.js","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/constants.ts","/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/utils.ts"],"map":"{\"version\":3,\"file\":\"fraction.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/entities/fractions/fraction.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tommy/Desktop/GitHub/PyeSwap/PyeSwap_swap-sdk-tn/src/entities/fractions/fraction.d.ts","writeByteOrderMark":false,"text":"import JSBI from 'jsbi';\r\nimport { BigintIsh, Rounding } from '../../constants';\r\nexport declare class Fraction {\r\n    readonly numerator: JSBI;\r\n    readonly denominator: JSBI;\r\n    constructor(numerator: BigintIsh, denominator?: BigintIsh);\r\n    get quotient(): JSBI;\r\n    get remainder(): Fraction;\r\n    invert(): Fraction;\r\n    add(other: Fraction | BigintIsh): Fraction;\r\n    subtract(other: Fraction | BigintIsh): Fraction;\r\n    lessThan(other: Fraction | BigintIsh): boolean;\r\n    equalTo(other: Fraction | BigintIsh): boolean;\r\n    greaterThan(other: Fraction | BigintIsh): boolean;\r\n    multiply(other: Fraction | BigintIsh): Fraction;\r\n    divide(other: Fraction | BigintIsh): Fraction;\r\n    toSignificant(significantDigits: number, format?: object, rounding?: Rounding): string;\r\n    toFixed(decimalPlaces: number, format?: object, rounding?: Rounding): string;\r\n}\r\n"}}
